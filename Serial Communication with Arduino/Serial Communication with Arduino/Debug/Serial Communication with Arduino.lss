
Serial Communication with Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000234  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000234  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009f3  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ed  00000000  00000000  00000d63  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b1  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001904  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000453  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015e  00000000  00000000  00001de7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001f45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  9e:	0c 94 18 01 	jmp	0x230	; 0x230 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
	
	return 0;
}

void adc_init(void){
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    //16Mhz/128 = 125Khz the ADC reference clock
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	87 60       	ori	r24, 0x07	; 7
  ae:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);                //Voltage reference from Avcc (5v)
  b0:	ac e7       	ldi	r26, 0x7C	; 124
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	8c 91       	ld	r24, X
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);                //Turn on ADC
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Do an initial conversion because this one is the slowest and to ensure that everything is up and running
  c0:	80 81       	ld	r24, Z
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	80 83       	st	Z, r24
  c6:	08 95       	ret

000000c8 <read_adc>:
}

uint16_t read_adc(uint8_t channel){
	ADMUX &= 0xF0;                    //Clear the older channel that was read
  c8:	ec e7       	ldi	r30, 0x7C	; 124
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	90 81       	ld	r25, Z
  ce:	90 7f       	andi	r25, 0xF0	; 240
  d0:	90 83       	st	Z, r25
	ADMUX |= channel;                //Defines the new ADC channel to be read
  d2:	90 81       	ld	r25, Z
  d4:	89 2b       	or	r24, r25
  d6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Starts a new conversion
  d8:	ea e7       	ldi	r30, 0x7A	; 122
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));            //Wait until the conversion is done
  e2:	80 81       	ld	r24, Z
  e4:	86 fd       	sbrc	r24, 6
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <read_adc+0x1a>
	return ADCW;                    //Returns the ADC value of the chosen channel
  e8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  ec:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  f0:	08 95       	ret

000000f2 <USART_init>:

void USART_init(void){
	
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
  f2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
  f6:	83 e3       	ldi	r24, 0x33	; 51
  f8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  fc:	88 e1       	ldi	r24, 0x18	; 24
  fe:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);
 102:	86 e0       	ldi	r24, 0x06	; 6
 104:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 108:	08 95       	ret

0000010a <USART_send>:
}

void USART_send( unsigned char data){
	
	while(!(UCSR0A & (1<<UDRE0)));
 10a:	e0 ec       	ldi	r30, 0xC0	; 192
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	90 81       	ld	r25, Z
 110:	95 ff       	sbrs	r25, 5
 112:	fd cf       	rjmp	.-6      	; 0x10e <USART_send+0x4>
	UDR0 = data;
 114:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 118:	08 95       	ret

0000011a <USART_putstring>:
	
}

void USART_putstring(char* StringPtr){
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	ec 01       	movw	r28, r24
	
	while(*StringPtr != 0x00){
 120:	88 81       	ld	r24, Y
 122:	88 23       	and	r24, r24
 124:	31 f0       	breq	.+12     	; 0x132 <USART_putstring+0x18>
 126:	21 96       	adiw	r28, 0x01	; 1
		USART_send(*StringPtr);
 128:	0e 94 85 00 	call	0x10a	; 0x10a <USART_send>
	
}

void USART_putstring(char* StringPtr){
	
	while(*StringPtr != 0x00){
 12c:	89 91       	ld	r24, Y+
 12e:	81 11       	cpse	r24, r1
 130:	fb cf       	rjmp	.-10     	; 0x128 <USART_putstring+0xe>
		USART_send(*StringPtr);
		StringPtr++;
	}
	
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <main>:
uint16_t read_adc(uint8_t channel);    //Function to read an arbitrary analog channel/pin
void USART_init(void);            //Function to initialize and configure the USART/serial
void USART_send( unsigned char data);    //Function that sends a char over the serial port
void USART_putstring(char* StringPtr);    //Function that sends a string over the serial port

int main(void){
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	00 d0       	rcall	.+0      	; 0x13e <main+0x6>
 13e:	00 d0       	rcall	.+0      	; 0x140 <main+0x8>
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
	
	adc_init();        //Setup the ADC
 144:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
	USART_init();        //Setup the USART
 148:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_init>
	DDRB = 0xff;
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	84 b9       	out	0x04, r24	; 4
		
		if (x>=500 && x<900)
		{
			USART_putstring("MID");
			USART_send(13);
			PORTB = 1;
 150:	ff 24       	eor	r15, r15
 152:	f3 94       	inc	r15
	
	adc_init();        //Setup the ADC
	USART_init();        //Setup the USART
	DDRB = 0xff;
	while(1){
		uint16_t x= read_adc(0);
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 64 00 	call	0xc8	; 0xc8 <read_adc>
 15a:	8c 01       	movw	r16, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 15c:	4a e0       	ldi	r20, 0x0A	; 10
 15e:	be 01       	movw	r22, r28
 160:	6f 5f       	subi	r22, 0xFF	; 255
 162:	7f 4f       	sbci	r23, 0xFF	; 255
 164:	0e 94 ee 00 	call	0x1dc	; 0x1dc <__utoa_ncheck>
		
		char buffer[4];
		utoa(x,buffer,10);
		USART_putstring(buffer);
 168:	ce 01       	movw	r24, r28
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	0e 94 8d 00 	call	0x11a	; 0x11a <USART_putstring>
		USART_putstring(",");
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0e 94 8d 00 	call	0x11a	; 0x11a <USART_putstring>
		USART_send(13);
 178:	8d e0       	ldi	r24, 0x0D	; 13
 17a:	0e 94 85 00 	call	0x10a	; 0x10a <USART_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	2f ef       	ldi	r18, 0xFF	; 255
 180:	87 ea       	ldi	r24, 0xA7	; 167
 182:	91 e6       	ldi	r25, 0x61	; 97
 184:	21 50       	subi	r18, 0x01	; 1
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <main+0x4c>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x56>
 18e:	00 00       	nop
		_delay_ms(2000);
		
		if (x>=500 && x<900)
 190:	c8 01       	movw	r24, r16
 192:	84 5f       	subi	r24, 0xF4	; 244
 194:	91 40       	sbci	r25, 0x01	; 1
 196:	80 39       	cpi	r24, 0x90	; 144
 198:	91 40       	sbci	r25, 0x01	; 1
 19a:	40 f4       	brcc	.+16     	; 0x1ac <main+0x74>
		{
			USART_putstring("MID");
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	0e 94 8d 00 	call	0x11a	; 0x11a <USART_putstring>
			USART_send(13);
 1a4:	8d e0       	ldi	r24, 0x0D	; 13
 1a6:	0e 94 85 00 	call	0x10a	; 0x10a <USART_send>
			PORTB = 1;
 1aa:	f5 b8       	out	0x05, r15	; 5
		}
		if(x<500){
 1ac:	04 3f       	cpi	r16, 0xF4	; 244
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	18 07       	cpc	r17, r24
 1b2:	40 f4       	brcc	.+16     	; 0x1c4 <main+0x8c>
			USART_putstring("LOW");
 1b4:	86 e0       	ldi	r24, 0x06	; 6
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	0e 94 8d 00 	call	0x11a	; 0x11a <USART_putstring>
			USART_send(13);
 1bc:	8d e0       	ldi	r24, 0x0D	; 13
 1be:	0e 94 85 00 	call	0x10a	; 0x10a <USART_send>
			PORTB = 0;
 1c2:	15 b8       	out	0x05, r1	; 5
		}
		if(x>900){
 1c4:	05 38       	cpi	r16, 0x85	; 133
 1c6:	13 40       	sbci	r17, 0x03	; 3
 1c8:	28 f2       	brcs	.-118    	; 0x154 <main+0x1c>
			USART_putstring("HIGH");
 1ca:	8a e0       	ldi	r24, 0x0A	; 10
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0e 94 8d 00 	call	0x11a	; 0x11a <USART_putstring>
			USART_send(13);
 1d2:	8d e0       	ldi	r24, 0x0D	; 13
 1d4:	0e 94 85 00 	call	0x10a	; 0x10a <USART_send>
			PORTB = 1;
 1d8:	f5 b8       	out	0x05, r15	; 5
			
		}
		
	}
 1da:	bc cf       	rjmp	.-136    	; 0x154 <main+0x1c>

000001dc <__utoa_ncheck>:
 1dc:	bb 27       	eor	r27, r27

000001de <__utoa_common>:
 1de:	fb 01       	movw	r30, r22
 1e0:	55 27       	eor	r21, r21
 1e2:	aa 27       	eor	r26, r26
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	aa 1f       	adc	r26, r26
 1ea:	a4 17       	cp	r26, r20
 1ec:	10 f0       	brcs	.+4      	; 0x1f2 <__utoa_common+0x14>
 1ee:	a4 1b       	sub	r26, r20
 1f0:	83 95       	inc	r24
 1f2:	50 51       	subi	r21, 0x10	; 16
 1f4:	b9 f7       	brne	.-18     	; 0x1e4 <__utoa_common+0x6>
 1f6:	a0 5d       	subi	r26, 0xD0	; 208
 1f8:	aa 33       	cpi	r26, 0x3A	; 58
 1fa:	08 f0       	brcs	.+2      	; 0x1fe <__utoa_common+0x20>
 1fc:	a9 5d       	subi	r26, 0xD9	; 217
 1fe:	a1 93       	st	Z+, r26
 200:	00 97       	sbiw	r24, 0x00	; 0
 202:	79 f7       	brne	.-34     	; 0x1e2 <__utoa_common+0x4>
 204:	b1 11       	cpse	r27, r1
 206:	b1 93       	st	Z+, r27
 208:	11 92       	st	Z+, r1
 20a:	cb 01       	movw	r24, r22
 20c:	0c 94 08 01 	jmp	0x210	; 0x210 <strrev>

00000210 <strrev>:
 210:	dc 01       	movw	r26, r24
 212:	fc 01       	movw	r30, r24
 214:	67 2f       	mov	r22, r23
 216:	71 91       	ld	r23, Z+
 218:	77 23       	and	r23, r23
 21a:	e1 f7       	brne	.-8      	; 0x214 <strrev+0x4>
 21c:	32 97       	sbiw	r30, 0x02	; 2
 21e:	04 c0       	rjmp	.+8      	; 0x228 <strrev+0x18>
 220:	7c 91       	ld	r23, X
 222:	6d 93       	st	X+, r22
 224:	70 83       	st	Z, r23
 226:	62 91       	ld	r22, -Z
 228:	ae 17       	cp	r26, r30
 22a:	bf 07       	cpc	r27, r31
 22c:	c8 f3       	brcs	.-14     	; 0x220 <strrev+0x10>
 22e:	08 95       	ret

00000230 <_exit>:
 230:	f8 94       	cli

00000232 <__stop_program>:
 232:	ff cf       	rjmp	.-2      	; 0x232 <__stop_program>
